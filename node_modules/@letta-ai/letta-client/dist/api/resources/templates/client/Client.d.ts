/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Templates {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Templates {
    protected readonly _options: Templates.Options;
    constructor(_options?: Templates.Options);
    /**
     * Creates an Agent or multiple Agents from a template
     *
     * @param {string} project - The project slug
     * @param {string} templateVersion - The template version, formatted as {template-name}:{version-number} or {template-name}:latest
     * @param {Letta.TemplatesCreateAgentsRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.templates.createAgents("project", "template_version")
     */
    createAgents(project: string, templateVersion: string, request?: Letta.TemplatesCreateAgentsRequest, requestOptions?: Templates.RequestOptions): Promise<Letta.TemplatesCreateAgentsResponse>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
