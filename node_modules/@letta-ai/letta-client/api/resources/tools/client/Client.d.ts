/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
export declare namespace Tools {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}
export declare class Tools {
    protected readonly _options: Tools.Options;
    constructor(_options?: Tools.Options);
    /**
     * Get a tool by ID
     *
     * @param {string} toolId
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.retrieve("tool_id")
     */
    retrieve(toolId: string, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool>;
    /**
     * Delete a tool by name
     *
     * @param {string} toolId
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.delete("tool_id")
     */
    delete(toolId: string, requestOptions?: Tools.RequestOptions): Promise<unknown>;
    /**
     * Update an existing tool
     *
     * @param {string} toolId
     * @param {Letta.ToolUpdate} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.modify("tool_id")
     */
    modify(toolId: string, request?: Letta.ToolUpdate, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool>;
    /**
     * Get a list of all tools available to agents belonging to the org of the user
     *
     * @param {Letta.ToolsListRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.list()
     */
    list(request?: Letta.ToolsListRequest, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool[]>;
    /**
     * Create a new tool
     *
     * @param {Letta.ToolCreate} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.create({
     *         sourceCode: "source_code"
     *     })
     */
    create(request: Letta.ToolCreate, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool>;
    /**
     * Create or update a tool
     *
     * @param {Letta.ToolCreate} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.upsert({
     *         sourceCode: "source_code"
     *     })
     */
    upsert(request: Letta.ToolCreate, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool>;
    /**
     * Upsert base tools
     *
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.addBaseTool()
     */
    addBaseTool(requestOptions?: Tools.RequestOptions): Promise<Letta.Tool[]>;
    /**
     * Attempt to build a tool from source, then run it on the provided arguments
     *
     * @param {Letta.ToolRunFromSource} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.runToolFromSource({
     *         sourceCode: "source_code",
     *         args: {
     *             "key": "value"
     *         }
     *     })
     */
    runToolFromSource(request: Letta.ToolRunFromSource, requestOptions?: Tools.RequestOptions): Promise<Letta.ToolReturnMessage>;
    /**
     * Get a list of all Composio apps
     *
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.listComposioApps()
     */
    listComposioApps(requestOptions?: Tools.RequestOptions): Promise<Letta.AppModel[]>;
    /**
     * Get a list of all Composio actions for a specific app
     *
     * @param {string} composioAppName
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.listComposioActionsByApp("composio_app_name")
     */
    listComposioActionsByApp(composioAppName: string, requestOptions?: Tools.RequestOptions): Promise<Letta.ActionModel[]>;
    /**
     * Add a new Composio tool by action name (Composio refers to each tool as an `Action`)
     *
     * @param {string} composioActionName
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.tools.addComposioTool("composio_action_name")
     */
    addComposioTool(composioActionName: string, requestOptions?: Tools.RequestOptions): Promise<Letta.Tool>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        Authorization: string;
    }>;
}
